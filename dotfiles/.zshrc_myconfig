setopt no_share_history
setopt interactivecomments

# setting for ubuntu
#source /etc/zsh_command_not_found

# z - jump around
export _Z_DATA=~/.zsh/z/z

# create parent directories on demand
alias mkdir='mkdir -pv'

# colorize diff output: install colordiff
alias diff='colordiff'

# Make mount command output pretty and human readable format
alias mount='mount | column -t'

# alias list file
alias l='ls -lah'
alias la='ls -lAh'
alias ll='ls -lh'
alias ln='ln -i'
alias ls='ls --color=tty'
alias lsa='ls -lah'

# confirmation
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'
alias rm='rm -I'


function ipaddr() {
    #ifconfig | grep -B1 "inet addr" \
        #| awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' \
        #| awk -F: '{ print $1 ": " $3 }' \
        #| column -t

    # ignore Docker IP
    ip a |grep "inet "|awk '{print $2}' | awk -F/ '{print $1}' | grep -v "172.*1$"| sort
}

alias ipaddrpublic='curl http://ipecho.net/plain; echo'


# Alias for Ubuntu
alias vihost='sudo vi /etc/hosts'

alias j='jump'

alias gs='git status'

alias xclip='xclip -selection clipboard'

# Update PS1
PROMPT='%{$fg_bold[cyan]%}%n@%m %{$reset_color%}%{$fg[white]%}[$(collapse_pwd)]%{$reset_color%} $(git_prompt_info) %{$fg[white]%}[%*] $(kube_ps1)
\
${ret_status} $(prompt_char) %{$reset_color%}';


########################################################################
# Peco
########################################################################
# Su dung peco giup tim kiem tren terminal de dang hon
# http://kipalog.com/posts/ChWh1HmIok3AGrYnuc8TrQ
#
# src: https://github.com/peco/peco
#
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        awk '!_[$0]++' | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history


########################################################################
# SSH Auto-complete
########################################################################
split() {
    local string="$1"
    local delimiter="$2"
    if [ -n "$string" ]; then
        local part
        while read -d "$delimiter" part; do
            echo $part
        done <<< "$string"
        echo $part
    fi
}

h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config)"}:#Host *}#Host }:#*[*?]*})
fi

#if [[ -r ~/.ssh/known_hosts ]]; then
  #h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
#fi

if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:ssh:*' hosts $h
  zstyle ':completion:*:slogin:*' hosts $h
  zstyle ':completion:*:scp:*' hosts $h
fi

#zstyle ':completion:*' users off
zstyle ':completion:*' users

#apt-cacher-ng backup coc colord gnats hplip irc kernoops libuuid libvirt-dnsmasq libvirt-qemu lightdm list proxy root saned speech-dispatcher sys syslog whoopsie www-data x zzz

# Don't complete uninteresting users
#zstyle ':completion:*:*:*:users' ignored-patterns \
        #adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        #clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
        #gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        #ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        #named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
        #operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        #rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
        #usbmux uucp vcsa wwwrun xfs '_*'


########################################################################
# DOCKER
########################################################################
alias dcompose=docker-compose

autoload bashcompinit
bashcompinit

docker-enter(){
    docker exec -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}

docker-entersh(){
    docker exec -it $1 sh -c "stty cols $COLUMNS rows $LINES && sh";
}

_docker-enter(){
    COMPREPLY=( $(docker ps --format "{{.Names}}" -f name=$2) );
}

complete -F _docker-enter docker-enter;
complete -F _docker-enter docker-entersh;
#export docker-enter;

alias dockerimgs="docker images --format '{{.Size}}\t{{.Repository}}:{{.Tag}}\t{{.ID}}' | sort -h | column -t"


########################################################################
# Kubernetes
########################################################################
source ~/tools/kube-ps1/kube-ps1.sh

# Auto-complete
source ~/tools/kubectx/completion/kubens.bash
source ~/tools/kubectx/completion/kubectx.bash

function kopscompletion() {
    source <(kops completion zsh)
}

# Shortcut
function krestart() {
    deployment_name=$1

    kubectl scale --replicas 0 deployment ${deployment_name}
    kubectl scale --replicas 1 deployment ${deployment_name}
}

function kstop() {
    deployment_name=$1

    kubectl scale --replicas 0 deployment ${deployment_name}
}

function kstart() {
    deployment_name=$1

    kubectl scale --replicas 1 deployment ${deployment_name}
}


function klogs() {
    deployment_name=$1

    kubectl logs -f --tail 10 `kubectl get po | egrep -o "${deployment_name}[a-zA-Z0-9-]+"`
}

function kexec() {
    deployment_name=$1

    kubectl exec -it `kubectl get po | egrep -o "${deployment_name}[a-zA-Z0-9-]+"` bash
}

function kexecsh() {
    deployment_name=$1

    kubectl exec -it `kubectl get po | egrep -o "${deployment_name}[a-zA-Z0-9-]+"` sh
}

function ssh_kube_node() {
    node_ip_addr=$1

    ssh -i ~/.ssh/system@cbex.xyz ubuntu@${node_ip_addr}
}

########################################################################
# Gcloud
########################################################################
# Auto-complete
source /usr/share/google-cloud-sdk/completion.zsh.inc


########################################################################
# Sysadmin
########################################################################
function ncc() {
    IP=$1
    PORT=$2
    nc -w 1 $IP $PORT < /dev/null; echo $?
}
